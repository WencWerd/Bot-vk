import json
from random import randint
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import logging

import handlers
import setting
from setting import GROUP_ID, TOKEN

log = logging.getLogger('bot')


def configure_logging():
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(logging.Formatter('%(levelname)s %(message)s'))
    stream_handler.setLevel(logging.DEBUG)
    log.addHandler(stream_handler)

    file_handler = logging.FileHandler("bot.log", encoding='UTF8')
    file_handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))
    file_handler.setLevel(logging.DEBUG)
    log.addHandler(file_handler)
    log.setLevel(logging.DEBUG)


class UserState:
    def __init__(self, scenario_name, step_name, context=None):
        self.scenario_name = scenario_name
        self.step_name = step_name
        self.context = context or {}


class Bot:
    def __init__(self, GROUP_ID, TOKEN):
        self.group_id = GROUP_ID
        self.token = TOKEN
        self.vk = vk_api.VkApi(token=TOKEN)
        self.long_paller = VkBotLongPoll(self.vk, self.group_id)
        self.api = self.vk.get_api()
        self.user_states = dict()


    def run(self):
        for event in self.long_paller.listen():
            try:
                self.on_event(event)
            except Exception:
                log.exception('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è')

    def on_event(self, event):
        if event.type != VkBotEventType.MESSAGE_NEW:
            log.info('–ú—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞', event.type)
            return

        user_id = event.object.peer_id
        text = event.object.text

        if user_id in self.user_states:
            text_to_send = self.continue_scenario(user_id, text)
        else:
            for intent in setting.IVENTS:
                if any(token in text.lower() for token in intent['tokens']):
                    if intent['answer']:
                        text_to_send = intent['answer']
                    else:
                        text_to_send = self.start_scenario(user_id, intent['scenario'])
                    break
            else:
                self.api.messages.send(
                    message=setting.DEFAULT_ANSWER,
                    random_id=randint(0, 2 ** 20),
                    peer_id=user_id,
                )
                self.api.messages.send(
                    message=setting.DEFAULT_ANSWER,
                    random_id=randint(0, 2 ** 20),
                    peer_id=user_id,
                    sticker_id=50895
                )

        self.api.messages.send(
            message=text_to_send,
            random_id=randint(0, 2 ** 20),
            peer_id=user_id,
        )

    def start_scenario(self,user_id, scenario_name, ):
        scenario = setting.SCENARIOS[scenario_name]
        first_step = scenario['first_step']
        step = scenario['steps'][first_step]
        text_to_send = step['text']
        self.user_states[user_id] = UserState(scenario_name=scenario_name, step_name=first_step)
        return text_to_send

    def continue_scenario(self, user_id, text):
        state = self.user_states[user_id]
        steps = setting.SCENARIOS[state.scenario_name]['steps']
        step = steps[state.step_name]

        handler = getattr(handlers, step['handler'])
        if handler(text=text, context=state.context):
            next_step = steps[step['next_step']]
            text_to_send = next_step['text'].format()
            if next_step['next_step']:
                state.step_name = step['next_step']
            else:
                self.user_states.pop(user_id)
        else:
            text_to_send = step['failure_text'].format()

        return text_to_send

    def keyboard(self):
        keyboard = {
            "one_time": False,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        "payload": "{\"button\": \"1\"}",
                        "label": "–ü—Ä–∞–≤–∏–ª–∞"
                    },
                    "color": "primary"
                },
                    {
                        "action": {
                            "type": "text",
                            "payload": "{\"button\": \"2\"}",
                            "label": "–ü–æ–µ—Ö–∞–ª–∏"
                        },
                        "color": "positive"
                    },
                ]
            ],
            'inline': False
        }

        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        keyboard = str(keyboard.decode('utf-8'))

        while True:
            for event in self.long_paller.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    if event.object.text.lower() == "–Ω–∞—á–∞—Ç—å":
                        self.vk.method("messages.send",
                                  {"peer_id": event.object.peer_id, "message": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ! üëë\n \n "
                                                                               "–Ø –≤–∞—à —Å–æ–≤–µ—Ç–Ω–∏–∫.\n"
                                                                               , "random_id": 0,
                                   "keyboard": keyboard}
                                       )
                        self.vk.method("messages.send",
                                       {"peer_id": event.object.peer_id, "message": "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞ üëë", "random_id": 0,
                                        "keyboard": keyboard, 'sticker_id': 50906}
                                       )
                        self.vk.method("messages.send",
                                       {"peer_id": event.object.peer_id, "message": "–í—Å–µ —É–∂–µ –¥–∞–≤–Ω–æ –≥–æ—Ç–æ–≤–æ, –∞ –≤—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!\n\n"
                                                                                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É! "
                                                                                    "(–°–æ–≤–µ—Ç—É—é —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞)", "random_id": 0,
                                        "keyboard": keyboard}
                                       )
                    if "–ü—Ä–∞–≤–∏–ª–∞" in event.object.text:
                        self.vk.method("messages.send",
                                  {"peer_id": event.object.peer_id, "message": '–≠—Ç–æ –±—É–¥–µ—Ç –Ω–µ–∫–∏–π –∫–≤–µ—Å—Ç.\n\n'
                                  '–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞–Ω–∏—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–∞—Ç—å –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n' 
                                  '‚Äº –û—Ç–≤–µ—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ, —á—Ç–æ —Ç—ã –Ω–∞–π–¥–µ—à—å ‚Äº\n\n'
                                  '–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—é–¥–∞ —Ç–æ, —á—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –≤–µ—Ä–Ω—ã–º, –∏, –µ—Å–ª–∏ –≤—Å–µ –∫–∞–∫ –Ω–∞–¥–æ, –∑–∞–¥–∞–Ω–∏—è –ø—Ä–¥–æ–ª–∂–∞—Ç—Å—è.\n', "random_id": 0
                                   }
                                       )
                    if "–ü–æ–µ—Ö–∞–ª–∏" in event.object.text:
                        keyboard = {
                            "one_time": True,
                            "buttons": [],
                            'inline': False
                        }
                        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
                        keyboard = str(keyboard.decode('utf-8'))
                        self.vk.method("messages.send",
                                       {"peer_id": event.object.peer_id, "message": '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê',
                                        "random_id": 0,
                                        "keyboard": keyboard})
                        self.vk.method("messages.send",
                                  {"peer_id": event.object.peer_id, "message": ' 1Ô∏è‚É£ –í–∞—à–µ –í–µ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≥–∞–¥–∞—Ç—å –æ —á–µ–º —Ç—É—Ç —Ä–µ—á—å!\n\n'
                                    '–ó–¥–µ—Å—å —Å—Ç–∞—Ä–∏–∫–∏ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç "—Å—ä–µ–∑–¥":\n'
                                    '–ù–∞ –ª–∞–≤–∫–∏ —Å–µ–≤ –∫–∞–∫ –∫—É—Ä—ã –Ω–∞ –Ω–∞—Å–µ—Å—Ç,\n'
                                    '–í–ª–∞—Å—Ç—å –ø—Ä–µ–¥–µ—Ä–∂–∞—â–∏—Ö —è—Ä–æ—Å—Ç–Ω–æ —Ä—É–≥–∞—é—Ç,\n'
                                    '–°—Ç—Ä–∞—à–∏–ª–∫–∞–º–∏ –≤–æ–π–Ω—ã –≤–Ω—É—á–∞—Ç –ø—É–≥–∞—é—Ç,\n'
                                    '–•–≤–∞—Ç–∞—è—Å—å –∑–∞ –æ–±–∏–ª—å–µ —Ö–≤–æ—Ä—ã—Ö –º–µ—Å—Ç,\n'
                                    '–û –≤—Å–µ—Ö –≤—Å–µ–≥–¥–∞ –≤—Å–µ –ø–æ –Ω–∞—Å–ª—ã—à–∫–µ –∑–Ω–∞—é—Ç -\n'
                                    '–ö—Ç–æ —Å –∫–µ–º —á–µ–≥–æ-–∫–æ–≥–¥–∞ –∏ –∫—Ç–æ —á—Ç–æ –µ—Å—Ç.\n'
                                    '–î–≤–µ—Ä—å–º–∏ –∏ –¥–æ–º–æ—Ñ–æ–Ω–æ–º –Ω–∞—Å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç\n'
                                    '–£—é—Ç–Ω—ã–π, —á–∏—Å—Ç—ã–π –¥—Ä—É–≥ –∂–∏–ª—å—Ü–æ–≤ - ...\n'
                                      , "random_id": 0
                                  }
                                       )
                        bot.run()



if __name__ == "__main__":
    configure_logging()
    bot = Bot(GROUP_ID, TOKEN)
    bot.keyboard()


